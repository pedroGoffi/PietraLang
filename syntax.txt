TODOS:
-- make the language syntax
-- choose an allocator <thinking of std::vector>
-- make the compiler target <thinking of llvm intermediate representation>
-- make smart parrser <namespaces>

language used:
  * = more than one
  ? = optional

expr_atom =  INT					|
	     FLOAT					|
	     STRING					|
	     NAME					|
	     expr 'cast_kw' type

stmt      = 'if_kw'  expr stmt ('elif' expr stmt)*? ('else' stmt)*? |
	     'for_kw' stmt_list

expr_list     = expr (',' expr_list)*
operand_expr  = INT		|
	      FLOAT		|
	      STRING		|
	        NAME		|
		'(' expr ')'	|
		'{' expr_list '}'
		
base_expr     = operand_expr ('(' expr_list ')' | '[' expr ']' | '.' base_expr)*
unary_expr    = [+-&*!] unary_expr | base_expr
mul_op        = '*' | '/' | '%' | '<<' | '>>' | '&'
mul_expr      = unary_expr (mul_op unary_expr)*
add_op        = '+' |
	        '-' |
		'|' |
		'^'
add_expr      = mul_expr (add_op mul_expr)*
cmp_op        = LT '<' | LTEQ '<='| EQ '=='| NEQ '!=' | GT '>'| GTEQ '>='
cmp_expr      = mul_expr (cmp_op mul_expr)*
and_expr      = cmp_expr (AND cmp_expr)*
or_expr       = and_expr (OR and_expr)*
ternary_expr  = ternary_expr 'if_kw' or_expr 'else' ternary_expr |
	        or_expr

 
expr = ternary_expr 
